---
image: "docker:latest"
variables:
  MAVEN_OPTS: "-Dmaven.repo.local=${CI_PROJECT_DIR}/.m2"

cache:
  paths:
  - .m2/
  - ./amano-eureka/target/*.jar
  - ./amano-iam/target/*.jar
  - ./amano-zuul/target/*.jar
  - ./parking-service/target/*.jar
  - ./ticket-service/target/*.jar


stages:
- "build"
- "package"
- "deploy"

build-mvn:
  image: "maven:3-jdk-8"
  stage: "build"
  script: "mvn package -U -B"
# 모든 잡은 Fresh 한 Docker container 안에서 시작됨.


# 도커를 빌드를 하기 위해서는, Docker container 안에서 또 Docker 명령어를 수행해야 함.
# 곧, Docker in Docker.
docker-build:
  image: "docker:latest"
  stage: package
  script:
    # Docker file 에는, target/*.jar 가 필요한데, 파일이 없다고 에러가 남.
    # 이유는, 파이프라인의 각 잡 단계는 Fresh 한 상태로 시작하기 때문에, 
    # 전 단계에서 생성된 target 결과물들이 없음. 
    # 캐쉬로 target 결과물들을 연결해주어야 한다.
  
    # 일단, Docker 이미지들을 생성함.
    - docker build -t gitlab.amano-cloud.com:5000/amano-eureka:v1 ./amano-eureka/
    - docker build -t gitlab.amano-cloud.com:5000/amano-iam:v1 ./amano-iam/
    - docker build -t gitlab.amano-cloud.com:5000/amano-zuul:v1 ./amano-zuul/
    - docker build -t gitlab.amano-cloud.com:5000/parking-service:v1 ./parking-service/
    - docker build -t gitlab.amano-cloud.com:5000/ticket-service:v1 ./ticket-service/

    # Docker 이미지들을 Docker registry 서버에 업로드.
    - docker push gitlab.amano-cloud.com:5000/amano-eureka:v1
    - docker push gitlab.amano-cloud.com:5000/amano-iam:v1
    - docker push gitlab.amano-cloud.com:5000/amano-zuul:v1
    - docker push gitlab.amano-cloud.com:5000/parking-service:v1
    - docker push gitlab.amano-cloud.com:5000/ticket-service:v1

    # 그런데, 이미지를 올리기 위해서는, /etc/docker/daemon.json 에
    # "insecure-registries" : ["gitlab.amano-cloud.com:5000"] 설정이 필요함.
    # 그러기 위해서, /etc/gitlab-runner/config.toml 설정에 다음과 같은 항목이 있다.
    # [runners.machine]
    #      "engine-insecure-registry=gitlab.amano-cloud.com:5000"


    # docker-machine 을 쓰지 않는 환경에서는, gitlab-runner 가 돌아가는 서버에
    # 그냥 /etc/docker/daemon.json 에
    # "insecure-registries" : ["gitlab.amano-cloud.com:5000"] 설정을 하면 된다.



# ssh-client 이미지는, 기본 ubuntu 에, ssh,scp,
# 그리고 패스워드를 묻는 프롬프트 없이 접속할 수 있는 sshpass 가 설치되어있음.

# 필요사항: dev 환경이 올라가는 서버.
# ec2-52-78-72-79.ap-northeast-2.compute.amazonaws.com

# EC2 password 로 접속 가능하게 하기 http://luckyyowu.tistory.com/321
# 패스워드는 amano-cloud


dev-deploy:
  image: gitlab.amano-cloud.com:5000/ssh-client:v1
  stage: deploy
  script:
     #파일 전달 (docker-compose-dev.yml)
    - sshpass -p amano-cloud scp -o StrictHostKeyChecking=no ./docker-compose-dev.yml centos@ec2-52-78-72-79.ap-northeast-2.compute.amazonaws.com:~/

      #새 이미지 다운로드
      # 전 단계에서 변경된 이미지를 새로 적용하기 위해, docker-compose pull 명령을 실행한다.
    - sshpass -p amano-cloud ssh -o StrictHostKeyChecking=no centos@ec2-52-78-72-79.ap-northeast-2.compute.amazonaws.com 'sudo /usr/local/bin/docker-compose -f /home/centos/docker-compose-dev.yml pull'

      # 컴포스 부팅
      # 기존에 실행되고 있는 docker-compose 컨테이너들을, 재사용하지 말고, 강제로 다시 생성한다.
      # --force-recreate
    - sshpass -p amano-cloud ssh -o StrictHostKeyChecking=no centos@ec2-52-78-72-79.ap-northeast-2.compute.amazonaws.com 'sudo /usr/local/bin/docker-compose -f /home/centos/docker-compose-dev.yml up -d --force-recreate'


